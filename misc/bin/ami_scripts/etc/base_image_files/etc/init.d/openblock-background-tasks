#!/bin/bash
# Start/stop the django-background-tasks daemon. This is copied largely from the cron init script.
#
### BEGIN INIT INFO
# Provides:          openblock-background-tasks 
# Required-Start:    $syslog $time
# Required-Stop:     $syslog $time
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: django-background-tasks daemon for Openblock 
# Description:       Runs long-running or background tasks launched by Openblock

### END INIT INFO

#LSBNAMES='-l'  # Uncomment for LSB name support in /etc/cron.d/

### CONFIGURABLE STUFF
# Set this to the user that your openblock deployment runs as.
# TODO: The daemon itself could use setuid
SU_USER="openblock"

LOGFILE=/var/log/openblock/background-tasks.log
VIRTUAL_ENV=/var/www/openblock/

DJANGO_SETTINGS_MODULE=myblock.settings

### END OF CONFIGURABLE STUFF

# This only works on linux, not other unixes.
. /lib/lsb/init-functions


DJADMIN="$VIRTUAL_ENV/bin/django-admin.py"
PIDFILE=/var/run/openblock/background-tasks.pid

mkdir -p `dirname $PIDFILE`
mkdir -p `dirname $LOGFILE`
chown $SU_USER `dirname $PIDFILE` `dirname $LOGFILE`

function do_start {
	start-stop-daemon --start --background \
	--pidfile $PIDFILE --make-pidfile \
	--user $SU_USER --chuid $SU_USER \
	--startas $DJADMIN -- process_tasks --settings=$DJANGO_SETTINGS_MODULE \
	--log-file=$LOGFILE --log-std --sleep=4 --traceback
}

function do_stop {
	start-stop-daemon --stop --pidfile $PIDFILE --name django-admin.py --retry 10 
}
case "$1" in
start)	log_begin_msg "Starting process_tasks..."
	do_start
        log_end_msg $?
	;;
stop)	log_begin_msg "Stopping process_tasks..."
	do_stop
        log_end_msg $?
        ;;
restart) log_begin_msg "Restarting process_tasks..."
	do_stop
	do_start
        log_end_msg $?
        ;;
*)	log_success_msg "Usage: /etc/init.d/openblock-background-tasks start|stop|restart"
        exit 1 
        ;;
esac
exit 0

